[project]
name = "youtube_loader_service"
version = "1.2.0"
description = "service is capable of download audio/video/text by youtube video/channel link and transcribe in case transcript is missing"
readme = "README.md"
authors = [{ name = "Sviatoslav Zaikin" }]

dependencies = [
    "openai_whisper==20231117",
    "faster-whisper>=1.0.3",
    "numpy<2",
    "yt_dlp>=2024.7.9",
    "youtube-transcript-api>=0.6.2",
    "google-api-core>=2.19.1",
    "google-api-python-client>=2.140.0",
    "loguru>=0.7.2",
    "aiohttp",
    "typeguard<5",
    "aiogram<14",
    "dropbox==12.0.2"
]
requires-python = ">=3.12"

[project.optional-dependencies]
dev = [
    "ruff>=0.6.2"
]
test = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio<0.25.0",
    "pytest-timeout",
    "python-dotenv",
]

[tool.ruff]
line-length = 120
target-version = "py312"
exclude = [
    ".git",
    "__pycache__",
    "*.eggs",
    "build",
    "dist",
    "venv",
    "saved_files"
]


[tool.ruff.lint]
ignore = [
    "RUF001", # String contains ambiguous char
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN204", # Missing return type annotation for special method `__del__`
    "T201", # `print` found
    "RUF003", # Comment contains smth
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN002", # Missing type annotation for `*args`
    "ANN001", # Missing type annotation for function argument `self`
]

extend-select = [
    "A", # flake8-builtins
    "ANN", # flake8-annotations
    "B", # flake8-bugbear
    "C4", # comprehensions
    "E", "W", # pycodestyle
    "F", # Pyflakes
    "I", # isort
    "ICN",
    "INP",
    "ISC",
    "N", # pep8-naming
    "NPY",
    "PERF",
    "PIE", # flake8-pie
    "PL",
    "PT",
    "Q",
    "RET",
    "RUF",
    "S", # flake8-bandit
    "SIM", # simplify
    "T10",
    "T20", # flake8-print
    "PTH",
    "UP",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "ANN001", "ANN201"]
"conftest.py" = ["S101", "ANN001", "ANN201"]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.pytest.ini_options]
addopts = '''
-s
-vv
--tb=long
--asyncio-mode=strict
'''
python_files = 'test_*.py'
filterwarnings = 'ignore::DeprecationWarning'
cache_dir = 'build/.pytest_cache_dir'
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "asyncio",
]
